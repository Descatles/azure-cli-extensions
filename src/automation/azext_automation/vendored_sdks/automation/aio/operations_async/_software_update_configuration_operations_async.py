# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SoftwareUpdateConfigurationOperations:
    """SoftwareUpdateConfigurationOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.automation.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def create(
        self,
        resource_group_name: str,
        automation_account_name: str,
        software_update_configuration_name: str,
        operating_system: Union[str, "models.OperatingSystemType"],
        client_request_id: Optional[str] = None,
        error: Optional["models.ErrorResponse"] = None,
        parameters: Optional[Dict[str, str]] = None,
        source: Optional[str] = None,
        task_properties_parameters: Optional[Dict[str, str]] = None,
        task_properties_source: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        expiry_time: Optional[datetime.datetime] = None,
        expiry_time_offset_minutes: Optional[float] = None,
        is_enabled: Optional[bool] = False,
        next_run: Optional[datetime.datetime] = None,
        next_run_offset_minutes: Optional[float] = None,
        interval: Optional[int] = None,
        frequency: Optional[Union[str, "models.ScheduleFrequency"]] = None,
        time_zone: Optional[str] = None,
        creation_time: Optional[datetime.datetime] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        week_days: Optional[List[str]] = None,
        month_days: Optional[List[int]] = None,
        monthly_occurrences: Optional[List["AdvancedScheduleMonthlyOccurrence"]] = None,
        windows: Optional["models.WindowsProperties"] = None,
        linux: Optional["models.LinuxProperties"] = None,
        duration: Optional[datetime.timedelta] = None,
        azure_virtual_machines: Optional[List[str]] = None,
        non_azure_computer_names: Optional[List[str]] = None,
        azure_queries: Optional[List["AzureQueryProperties"]] = None,
        non_azure_queries: Optional[List["NonAzureQueryProperties"]] = None,
        **kwargs
    ) -> "models.SoftwareUpdateConfiguration":
        """Create a new software update configuration with the name given in the URI.

        :param resource_group_name: Name of an Azure Resource group.
        :type resource_group_name: str
        :param automation_account_name: The name of the automation account.
        :type automation_account_name: str
        :param software_update_configuration_name: The name of the software update configuration to be
         created.
        :type software_update_configuration_name: str
        :param operating_system: operating system of target machines.
        :type operating_system: str or ~azure.mgmt.automation.models.OperatingSystemType
        :param client_request_id: Identifies this specific client request.
        :type client_request_id: str
        :param error: Details of provisioning error.
        :type error: ~azure.mgmt.automation.models.ErrorResponse
        :param parameters: Gets or sets the parameters of the task.
        :type parameters: dict[str, str]
        :param source: Gets or sets the name of the runbook.
        :type source: str
        :param task_properties_parameters: Gets or sets the parameters of the task.
        :type task_properties_parameters: dict[str, str]
        :param task_properties_source: Gets or sets the name of the runbook.
        :type task_properties_source: str
        :param start_time: Gets or sets the start time of the schedule.
        :type start_time: ~datetime.datetime
        :param expiry_time: Gets or sets the end time of the schedule.
        :type expiry_time: ~datetime.datetime
        :param expiry_time_offset_minutes: Gets or sets the expiry time's offset in minutes.
        :type expiry_time_offset_minutes: float
        :param is_enabled: Gets or sets a value indicating whether this schedule is enabled.
        :type is_enabled: bool
        :param next_run: Gets or sets the next run time of the schedule.
        :type next_run: ~datetime.datetime
        :param next_run_offset_minutes: Gets or sets the next run time's offset in minutes.
        :type next_run_offset_minutes: float
        :param interval: Gets or sets the interval of the schedule.
        :type interval: int
        :param frequency: Gets or sets the frequency of the schedule.
        :type frequency: str or ~azure.mgmt.automation.models.ScheduleFrequency
        :param time_zone: Gets or sets the time zone of the schedule.
        :type time_zone: str
        :param creation_time: Gets or sets the creation time.
        :type creation_time: ~datetime.datetime
        :param last_modified_time: Gets or sets the last modified time.
        :type last_modified_time: ~datetime.datetime
        :param description: Gets or sets the description.
        :type description: str
        :param week_days: Days of the week that the job should execute on.
        :type week_days: list[str]
        :param month_days: Days of the month that the job should execute on. Must be between 1 and 31.
        :type month_days: list[int]
        :param monthly_occurrences: Occurrences of days within a month.
        :type monthly_occurrences: list[~azure.mgmt.automation.models.AdvancedScheduleMonthlyOccurrence]
        :param windows: Windows specific update configuration.
        :type windows: ~azure.mgmt.automation.models.WindowsProperties
        :param linux: Linux specific update configuration.
        :type linux: ~azure.mgmt.automation.models.LinuxProperties
        :param duration: Maximum time allowed for the software update configuration run. Duration needs
         to be specified using the format PT[n]H[n]M[n]S as per ISO8601.
        :type duration: ~datetime.timedelta
        :param azure_virtual_machines: List of azure resource Ids for azure virtual machines targeted
         by the software update configuration.
        :type azure_virtual_machines: list[str]
        :param non_azure_computer_names: List of names of non-azure machines targeted by the software
         update configuration.
        :type non_azure_computer_names: list[str]
        :param azure_queries: List of Azure queries in the software update configuration.
        :type azure_queries: list[~azure.mgmt.automation.models.AzureQueryProperties]
        :param non_azure_queries: List of non Azure queries in the software update configuration.
        :type non_azure_queries: list[~azure.mgmt.automation.models.NonAzureQueryProperties]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SoftwareUpdateConfiguration or the result of cls(response)
        :rtype: ~azure.mgmt.automation.models.SoftwareUpdateConfiguration or ~azure.mgmt.automation.models.SoftwareUpdateConfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SoftwareUpdateConfiguration"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})

        _parameters = models.SoftwareUpdateConfiguration(error=error, parameters_properties_tasks_post_task_parameters=parameters, source_properties_tasks_post_task_source=source, parameters_properties_tasks_pre_task_parameters=task_properties_parameters, source_properties_tasks_pre_task_source=task_properties_source, start_time=start_time, expiry_time=expiry_time, expiry_time_offset_minutes=expiry_time_offset_minutes, is_enabled=is_enabled, next_run=next_run, next_run_offset_minutes=next_run_offset_minutes, interval=interval, frequency=frequency, time_zone=time_zone, creation_time_properties_schedule_info_creation_time=creation_time, last_modified_time_properties_schedule_info_last_modified_time=last_modified_time, description=description, week_days=week_days, month_days=month_days, monthly_occurrences=monthly_occurrences, operating_system=operating_system, windows=windows, linux=linux, duration=duration, azure_virtual_machines=azure_virtual_machines, non_azure_computer_names=non_azure_computer_names, azure_queries=azure_queries, non_azure_queries=non_azure_queries)
        api_version = "2017-05-15-preview"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._]+$'),
            'automationAccountName': self._serialize.url("automation_account_name", automation_account_name, 'str'),
            'softwareUpdateConfigurationName': self._serialize.url("software_update_configuration_name", software_update_configuration_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if client_request_id is not None:
            header_parameters['clientRequestId'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_parameters, 'SoftwareUpdateConfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('SoftwareUpdateConfiguration', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('SoftwareUpdateConfiguration', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    create.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}'}

    async def get_by_name(
        self,
        resource_group_name: str,
        automation_account_name: str,
        software_update_configuration_name: str,
        client_request_id: Optional[str] = None,
        **kwargs
    ) -> "models.SoftwareUpdateConfiguration":
        """Get a single software update configuration by name.

        :param resource_group_name: Name of an Azure Resource group.
        :type resource_group_name: str
        :param automation_account_name: The name of the automation account.
        :type automation_account_name: str
        :param software_update_configuration_name: The name of the software update configuration to be
         created.
        :type software_update_configuration_name: str
        :param client_request_id: Identifies this specific client request.
        :type client_request_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SoftwareUpdateConfiguration or the result of cls(response)
        :rtype: ~azure.mgmt.automation.models.SoftwareUpdateConfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SoftwareUpdateConfiguration"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})
        api_version = "2017-05-15-preview"

        # Construct URL
        url = self.get_by_name.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._]+$'),
            'automationAccountName': self._serialize.url("automation_account_name", automation_account_name, 'str'),
            'softwareUpdateConfigurationName': self._serialize.url("software_update_configuration_name", software_update_configuration_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if client_request_id is not None:
            header_parameters['clientRequestId'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SoftwareUpdateConfiguration', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_by_name.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}'}

    async def delete(
        self,
        resource_group_name: str,
        automation_account_name: str,
        software_update_configuration_name: str,
        client_request_id: Optional[str] = None,
        **kwargs
    ) -> None:
        """delete a specific software update configuration.

        :param resource_group_name: Name of an Azure Resource group.
        :type resource_group_name: str
        :param automation_account_name: The name of the automation account.
        :type automation_account_name: str
        :param software_update_configuration_name: The name of the software update configuration to be
         created.
        :type software_update_configuration_name: str
        :param client_request_id: Identifies this specific client request.
        :type client_request_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})
        api_version = "2017-05-15-preview"

        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._]+$'),
            'automationAccountName': self._serialize.url("automation_account_name", automation_account_name, 'str'),
            'softwareUpdateConfigurationName': self._serialize.url("software_update_configuration_name", software_update_configuration_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if client_request_id is not None:
            header_parameters['clientRequestId'] = self._serialize.header("client_request_id", client_request_id, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
          return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}'}

    async def list(
        self,
        resource_group_name: str,
        automation_account_name: str,
        client_request_id: Optional[str] = None,
        filter: Optional[str] = None,
        **kwargs
    ) -> "models.SoftwareUpdateConfigurationListResult":
        """Get all software update configurations for the account.

        :param resource_group_name: Name of an Azure Resource group.
        :type resource_group_name: str
        :param automation_account_name: The name of the automation account.
        :type automation_account_name: str
        :param client_request_id: Identifies this specific client request.
        :type client_request_id: str
        :param filter: The filter to apply on the operation.
        :type filter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SoftwareUpdateConfigurationListResult or the result of cls(response)
        :rtype: ~azure.mgmt.automation.models.SoftwareUpdateConfigurationListResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SoftwareUpdateConfigurationListResult"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})
        api_version = "2017-05-15-preview"

        # Construct URL
        url = self.list.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._]+$'),
            'automationAccountName': self._serialize.url("automation_account_name", automation_account_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if client_request_id is not None:
            header_parameters['clientRequestId'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SoftwareUpdateConfigurationListResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    list.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations'}
