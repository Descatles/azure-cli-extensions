# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_automation.generated._client_factory import cf_automation_account
    automation_automation_account = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._automation_account_operations#Automation'
        'AccountOperations.{}',
        client_factory=cf_automation_account)
    with self.command_group('automation automation-account', automation_automation_account,
                            client_factory=cf_automation_account, is_experimental=True) as g:
        g.custom_command('list', 'automation_automation_account_list')
        g.custom_show_command('show', 'automation_automation_account_show')
        g.custom_command('create', 'automation_automation_account_create')
        g.custom_command('update', 'automation_automation_account_update')
        g.custom_command('delete', 'automation_automation_account_delete')

    from azext_automation.generated._client_factory import cf_statistics
    automation_statistics = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._statistics_operations#StatisticsOperatio'
        'ns.{}',
        client_factory=cf_statistics)
    with self.command_group('automation statistics', automation_statistics, client_factory=cf_statistics,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_statistics_list')

    from azext_automation.generated._client_factory import cf_usage
    automation_usage = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._usage_operations#UsageOperations.{}',
        client_factory=cf_usage)
    with self.command_group('automation usage', automation_usage, client_factory=cf_usage, is_experimental=True) as g:
        g.custom_command('list', 'automation_usage_list')

    from azext_automation.generated._client_factory import cf_key
    automation_key = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._key_operations#KeyOperations.{}',
        client_factory=cf_key)
    with self.command_group('automation key', automation_key, client_factory=cf_key, is_experimental=True) as g:
        g.custom_command('list-by-automation-account', 'automation_key_list_by_automation_account')

    from azext_automation.generated._client_factory import cf_certificate
    automation_certificate = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._certificate_operations#CertificateOperat'
        'ions.{}',
        client_factory=cf_certificate)
    with self.command_group('automation certificate', automation_certificate, client_factory=cf_certificate,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_certificate_list')
        g.custom_show_command('show', 'automation_certificate_show')
        g.custom_command('create', 'automation_certificate_create')
        g.custom_command('update', 'automation_certificate_update')
        g.custom_command('delete', 'automation_certificate_delete')

    from azext_automation.generated._client_factory import cf_connection
    automation_connection = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._connection_operations#ConnectionOperatio'
        'ns.{}',
        client_factory=cf_connection)
    with self.command_group('automation connection', automation_connection, client_factory=cf_connection,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_connection_list')
        g.custom_show_command('show', 'automation_connection_show')
        g.custom_command('create', 'automation_connection_create')
        g.custom_command('update', 'automation_connection_update')
        g.custom_command('delete', 'automation_connection_delete')

    from azext_automation.generated._client_factory import cf_connection_type
    automation_connection_type = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._connection_type_operations#ConnectionTyp'
        'eOperations.{}',
        client_factory=cf_connection_type)
    with self.command_group('automation connection-type', automation_connection_type,
                            client_factory=cf_connection_type, is_experimental=True) as g:
        g.custom_command('list', 'automation_connection_type_list')
        g.custom_show_command('show', 'automation_connection_type_show')
        g.custom_command('create', 'automation_connection_type_create')
        g.generic_update_command('update', setter_arg_name = 'field_definitions', custom_func_name = 'automation_connec'
                                 'tion_type_update')
        g.custom_command('delete', 'automation_connection_type_delete')

    from azext_automation.generated._client_factory import cf_credential
    automation_credential = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._credential_operations#CredentialOperatio'
        'ns.{}',
        client_factory=cf_credential)
    with self.command_group('automation credential', automation_credential, client_factory=cf_credential,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_credential_list')
        g.custom_show_command('show', 'automation_credential_show')
        g.custom_command('create', 'automation_credential_create')
        g.custom_command('update', 'automation_credential_update')
        g.custom_command('delete', 'automation_credential_delete')

    from azext_automation.generated._client_factory import cf_dsc_configuration
    automation_dsc_configuration = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._dsc_configuration_operations#DscConfigur'
        'ationOperations.{}',
        client_factory=cf_dsc_configuration)
    with self.command_group('automation dsc-configuration', automation_dsc_configuration,
                            client_factory=cf_dsc_configuration, is_experimental=True) as g:
        g.custom_command('list', 'automation_dsc_configuration_list')
        g.custom_show_command('show', 'automation_dsc_configuration_show')
        g.custom_command('create', 'automation_dsc_configuration_create')
        g.custom_command('update', 'automation_dsc_configuration_update')
        g.custom_command('delete', 'automation_dsc_configuration_delete')

    from azext_automation.generated._client_factory import cf_hybrid_runbook_worker_group
    automation_hybrid_runbook_worker_group = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._hybrid_runbook_worker_group_operations#H'
        'ybridRunbookWorkerGroupOperations.{}',
        client_factory=cf_hybrid_runbook_worker_group)
    with self.command_group('automation hybrid-runbook-worker-group', automation_hybrid_runbook_worker_group,
                            client_factory=cf_hybrid_runbook_worker_group, is_experimental=True) as g:
        g.custom_command('list', 'automation_hybrid_runbook_worker_group_list')
        g.custom_show_command('show', 'automation_hybrid_runbook_worker_group_show')
        g.custom_command('update', 'automation_hybrid_runbook_worker_group_update')
        g.custom_command('delete', 'automation_hybrid_runbook_worker_group_delete')

    from azext_automation.generated._client_factory import cf_job_schedule
    automation_job_schedule = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._job_schedule_operations#JobScheduleOpera'
        'tions.{}',
        client_factory=cf_job_schedule)
    with self.command_group('automation job-schedule', automation_job_schedule, client_factory=cf_job_schedule,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_job_schedule_list')
        g.custom_show_command('show', 'automation_job_schedule_show')
        g.custom_command('create', 'automation_job_schedule_create')
        g.custom_command('delete', 'automation_job_schedule_delete')

    from azext_automation.generated._client_factory import cf_linked_workspace
    automation_linked_workspace = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._linked_workspace_operations#LinkedWorksp'
        'aceOperations.{}',
        client_factory=cf_linked_workspace)
    with self.command_group('automation linked-workspace', automation_linked_workspace,
                            client_factory=cf_linked_workspace, is_experimental=True) as g:
        g.custom_show_command('show', 'automation_linked_workspace_show')

    from azext_automation.generated._client_factory import cf_activity
    automation_activity = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._activity_operations#ActivityOperations.{'
        '}',
        client_factory=cf_activity)
    with self.command_group('automation activity', automation_activity, client_factory=cf_activity,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_activity_list')
        g.custom_show_command('show', 'automation_activity_show')

    from azext_automation.generated._client_factory import cf_module
    automation_module = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._module_operations#ModuleOperations.{}',
        client_factory=cf_module)
    with self.command_group('automation module', automation_module, client_factory=cf_module,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_module_list')
        g.custom_show_command('show', 'automation_module_show')
        g.custom_command('create', 'automation_module_create')
        g.custom_command('update', 'automation_module_update')
        g.custom_command('delete', 'automation_module_delete')

    from azext_automation.generated._client_factory import cf_object_data_type
    automation_object_data_type = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._object_data_type_operations#ObjectDataTy'
        'peOperations.{}',
        client_factory=cf_object_data_type)
    with self.command_group('automation object-data-type', automation_object_data_type,
                            client_factory=cf_object_data_type, is_experimental=True) as g:
        g.custom_command('list-field', 'automation_object_data_type_list_field')

    from azext_automation.generated._client_factory import cf_field
    automation_field = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._field_operations#FieldOperations.{}',
        client_factory=cf_field)
    with self.command_group('automation field', automation_field, client_factory=cf_field, is_experimental=True) as g:
        g.custom_command('list', 'automation_field_list')

    from azext_automation.generated._client_factory import cf_schedule
    automation_schedule = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._schedule_operations#ScheduleOperations.{'
        '}',
        client_factory=cf_schedule)
    with self.command_group('automation schedule', automation_schedule, client_factory=cf_schedule,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_schedule_list')
        g.custom_show_command('show', 'automation_schedule_show')
        g.custom_command('create', 'automation_schedule_create')
        g.custom_command('update', 'automation_schedule_update')
        g.custom_command('delete', 'automation_schedule_delete')

    from azext_automation.generated._client_factory import cf_variable
    automation_variable = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._variable_operations#VariableOperations.{'
        '}',
        client_factory=cf_variable)
    with self.command_group('automation variable', automation_variable, client_factory=cf_variable,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_variable_list')
        g.custom_show_command('show', 'automation_variable_show')
        g.custom_command('create', 'automation_variable_create')
        g.custom_command('update', 'automation_variable_update')
        g.custom_command('delete', 'automation_variable_delete')

    from azext_automation.generated._client_factory import cf_webhook
    automation_webhook = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._webhook_operations#WebhookOperations.{}',
        client_factory=cf_webhook)
    with self.command_group('automation webhook', automation_webhook, client_factory=cf_webhook,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_webhook_list')
        g.custom_show_command('show', 'automation_webhook_show')
        g.custom_command('create', 'automation_webhook_create')
        g.custom_command('update', 'automation_webhook_update')
        g.custom_command('delete', 'automation_webhook_delete')
        g.custom_command('generate-uri', 'automation_webhook_generate_uri')

    from azext_automation.generated._client_factory import cf_watcher
    automation_watcher = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._watcher_operations#WatcherOperations.{}',
        client_factory=cf_watcher)
    with self.command_group('automation watcher', automation_watcher, client_factory=cf_watcher,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_watcher_list')
        g.custom_show_command('show', 'automation_watcher_show')
        g.custom_command('create', 'automation_watcher_create')
        g.custom_command('update', 'automation_watcher_update')
        g.custom_command('delete', 'automation_watcher_delete')
        g.custom_command('start', 'automation_watcher_start')
        g.custom_command('stop', 'automation_watcher_stop')

    from azext_automation.generated._client_factory import cf_software_update_configuration
    automation_software_update_configuration = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._software_update_configuration_operations'
        '#SoftwareUpdateConfigurationOperations.{}',
        client_factory=cf_software_update_configuration)
    with self.command_group('automation software-update-configuration', automation_software_update_configuration,
                            client_factory=cf_software_update_configuration, is_experimental=True) as g:
        g.custom_command('list', 'automation_software_update_configuration_list')
        g.custom_show_command('show', 'automation_software_update_configuration_show')
        g.custom_command('create', 'automation_software_update_configuration_create')
        g.custom_command('delete', 'automation_software_update_configuration_delete')

    from azext_automation.generated._client_factory import cf_software_update_configuration_run
    automation_software_update_configuration_run = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._software_update_configuration_run_operat'
        'ions#SoftwareUpdateConfigurationRunOperations.{}',
        client_factory=cf_software_update_configuration_run)
    with self.command_group('automation software-update-configuration-run',
                            automation_software_update_configuration_run,
                            client_factory=cf_software_update_configuration_run, is_experimental=True) as g:
        g.custom_command('list', 'automation_software_update_configuration_run_list')
        g.custom_show_command('show', 'automation_software_update_configuration_run_show')

    from azext_automation.generated._client_factory import cf_software_update_configuration_machine_run
    automation_software_update_configuration_machine_run = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._software_update_configuration_machine_ru'
        'n_operations#SoftwareUpdateConfigurationMachineRunOperations.{}',
        client_factory=cf_software_update_configuration_machine_run)
    with self.command_group('automation software-update-configuration-machine-run',
                            automation_software_update_configuration_machine_run,
                            client_factory=cf_software_update_configuration_machine_run, is_experimental=True) as g:
        g.custom_command('list', 'automation_software_update_configuration_machine_run_list')
        g.custom_show_command('show', 'automation_software_update_configuration_machine_run_show')

    from azext_automation.generated._client_factory import cf_source_control
    automation_source_control = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._source_control_operations#SourceControlO'
        'perations.{}',
        client_factory=cf_source_control)
    with self.command_group('automation source-control', automation_source_control, client_factory=cf_source_control,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_source_control_list')
        g.custom_show_command('show', 'automation_source_control_show')
        g.custom_command('create', 'automation_source_control_create')
        g.custom_command('update', 'automation_source_control_update')
        g.custom_command('delete', 'automation_source_control_delete')

    from azext_automation.generated._client_factory import cf_source_control_sync_job
    automation_source_control_sync_job = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._source_control_sync_job_operations#Sourc'
        'eControlSyncJobOperations.{}',
        client_factory=cf_source_control_sync_job)
    with self.command_group('automation source-control-sync-job', automation_source_control_sync_job,
                            client_factory=cf_source_control_sync_job, is_experimental=True) as g:
        g.custom_command('list', 'automation_source_control_sync_job_list')
        g.custom_show_command('show', 'automation_source_control_sync_job_show')
        g.custom_command('create', 'automation_source_control_sync_job_create')

    from azext_automation.generated._client_factory import cf_source_control_sync_job_stream
    automation_source_control_sync_job_stream = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._source_control_sync_job_stream_operation'
        's#SourceControlSyncJobStreamOperations.{}',
        client_factory=cf_source_control_sync_job_stream)
    with self.command_group('automation source-control-sync-job-stream', automation_source_control_sync_job_stream,
                            client_factory=cf_source_control_sync_job_stream, is_experimental=True) as g:
        g.custom_command('list', 'automation_source_control_sync_job_stream_list')
        g.custom_show_command('show', 'automation_source_control_sync_job_stream_show')

    from azext_automation.generated._client_factory import cf_job
    automation_job = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._job_operations#JobOperations.{}',
        client_factory=cf_job)
    with self.command_group('automation job', automation_job, client_factory=cf_job, is_experimental=True) as g:
        g.custom_command('list', 'automation_job_list')
        g.custom_show_command('show', 'automation_job_show')
        g.custom_command('create', 'automation_job_create')
        g.custom_command('resume', 'automation_job_resume')
        g.custom_command('stop', 'automation_job_stop')
        g.custom_command('suspend', 'automation_job_suspend')

    from azext_automation.generated._client_factory import cf_job_stream
    automation_job_stream = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._job_stream_operations#JobStreamOperation'
        's.{}',
        client_factory=cf_job_stream)
    with self.command_group('automation job-stream', automation_job_stream, client_factory=cf_job_stream,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_job_stream_list')
        g.custom_show_command('show', 'automation_job_stream_show')

    from azext_automation.generated._client_factory import cf_agent_registration_information
    automation_agent_registration_information = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._agent_registration_information_operation'
        's#AgentRegistrationInformationOperations.{}',
        client_factory=cf_agent_registration_information)
    with self.command_group('automation agent-registration-information', automation_agent_registration_information,
                            client_factory=cf_agent_registration_information, is_experimental=True) as g:
        g.custom_show_command('show', 'automation_agent_registration_information_show')
        g.custom_command('regenerate-key', 'automation_agent_registration_information_regenerate_key')

    from azext_automation.generated._client_factory import cf_dsc_node
    automation_dsc_node = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._dsc_node_operations#DscNodeOperations.{}'
        '',
        client_factory=cf_dsc_node)
    with self.command_group('automation dsc-node', automation_dsc_node, client_factory=cf_dsc_node,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_dsc_node_list')
        g.custom_show_command('show', 'automation_dsc_node_show')
        g.custom_command('update', 'automation_dsc_node_update')
        g.custom_command('delete', 'automation_dsc_node_delete')

    from azext_automation.generated._client_factory import cf_node_report
    automation_node_report = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._node_report_operations#NodeReportOperati'
        'ons.{}',
        client_factory=cf_node_report)
    with self.command_group('automation node-report', automation_node_report, client_factory=cf_node_report,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_node_report_list')
        g.custom_show_command('show', 'automation_node_report_show')

    from azext_automation.generated._client_factory import cf_dsc_compilation_job
    automation_dsc_compilation_job = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._dsc_compilation_job_operations#DscCompil'
        'ationJobOperations.{}',
        client_factory=cf_dsc_compilation_job)
    with self.command_group('automation dsc-compilation-job', automation_dsc_compilation_job,
                            client_factory=cf_dsc_compilation_job, is_experimental=True) as g:
        g.custom_command('list', 'automation_dsc_compilation_job_list')
        g.custom_show_command('show', 'automation_dsc_compilation_job_show')
        g.custom_command('create', 'automation_dsc_compilation_job_create', supports_no_wait=True)
        g.wait_command('wait')

    from azext_automation.generated._client_factory import cf_dsc_compilation_job_stream
    automation_dsc_compilation_job_stream = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._dsc_compilation_job_stream_operations#Ds'
        'cCompilationJobStreamOperations.{}',
        client_factory=cf_dsc_compilation_job_stream)
    with self.command_group('automation dsc-compilation-job-stream', automation_dsc_compilation_job_stream,
                            client_factory=cf_dsc_compilation_job_stream, is_experimental=True) as g:
        g.custom_command('list', 'automation_dsc_compilation_job_stream_list')

    from azext_automation.generated._client_factory import cf_dsc_node_configuration
    automation_dsc_node_configuration = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._dsc_node_configuration_operations#DscNod'
        'eConfigurationOperations.{}',
        client_factory=cf_dsc_node_configuration)
    with self.command_group('automation dsc-node-configuration', automation_dsc_node_configuration,
                            client_factory=cf_dsc_node_configuration, is_experimental=True) as g:
        g.custom_command('list', 'automation_dsc_node_configuration_list')
        g.custom_show_command('show', 'automation_dsc_node_configuration_show')
        g.custom_command('create', 'automation_dsc_node_configuration_create', supports_no_wait=True)
        g.custom_command('update', 'automation_dsc_node_configuration_update', supports_no_wait=True)
        g.custom_command('delete', 'automation_dsc_node_configuration_delete')
        g.wait_command('wait')

    from azext_automation.generated._client_factory import cf_node_count_information
    automation_node_count_information = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._node_count_information_operations#NodeCo'
        'untInformationOperations.{}',
        client_factory=cf_node_count_information)
    with self.command_group('automation node-count-information', automation_node_count_information,
                            client_factory=cf_node_count_information, is_experimental=True) as g:
        g.custom_show_command('show', 'automation_node_count_information_show')

    from azext_automation.generated._client_factory import cf_runbook_draft
    automation_runbook_draft = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._runbook_draft_operations#RunbookDraftOpe'
        'rations.{}',
        client_factory=cf_runbook_draft)
    with self.command_group('automation runbook-draft', automation_runbook_draft, client_factory=cf_runbook_draft,
                            is_experimental=True) as g:
        g.custom_show_command('show', 'automation_runbook_draft_show')
        g.custom_command('replace-content', 'automation_runbook_draft_replace_content', supports_no_wait=True)
        g.custom_command('undo-edit', 'automation_runbook_draft_undo_edit')
        g.wait_command('wait')

    from azext_automation.generated._client_factory import cf_runbook
    automation_runbook = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._runbook_operations#RunbookOperations.{}',
        client_factory=cf_runbook)
    with self.command_group('automation runbook', automation_runbook, client_factory=cf_runbook,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_runbook_list')
        g.custom_show_command('show', 'automation_runbook_show')
        g.custom_command('create', 'automation_runbook_create')
        g.custom_command('update', 'automation_runbook_update')
        g.custom_command('delete', 'automation_runbook_delete')
        g.custom_command('publish', 'automation_runbook_publish', supports_no_wait=True)
        g.wait_command('wait')

    from azext_automation.generated._client_factory import cf_test_job_stream
    automation_test_job_stream = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._test_job_stream_operations#TestJobStream'
        'Operations.{}',
        client_factory=cf_test_job_stream)
    with self.command_group('automation test-job-stream', automation_test_job_stream,
                            client_factory=cf_test_job_stream, is_experimental=True) as g:
        g.custom_command('list', 'automation_test_job_stream_list')
        g.custom_show_command('show', 'automation_test_job_stream_show')

    from azext_automation.generated._client_factory import cf_test_job
    automation_test_job = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._test_job_operations#TestJobOperations.{}'
        '',
        client_factory=cf_test_job)
    with self.command_group('automation test-job', automation_test_job, client_factory=cf_test_job,
                            is_experimental=True) as g:
        g.custom_show_command('show', 'automation_test_job_show')
        g.custom_command('create', 'automation_test_job_create')
        g.custom_command('resume', 'automation_test_job_resume')
        g.custom_command('stop', 'automation_test_job_stop')
        g.custom_command('suspend', 'automation_test_job_suspend')

    from azext_automation.generated._client_factory import cf_python2package
    automation_python2package = CliCommandType(
        operations_tmpl='azext_automation.vendored_sdks.automation.operations._python2_package_operations#Python2Packag'
        'eOperations.{}',
        client_factory=cf_python2package)
    with self.command_group('automation python2-package', automation_python2package, client_factory=cf_python2package,
                            is_experimental=True) as g:
        g.custom_command('list', 'automation_python2_package_list')
        g.custom_show_command('show', 'automation_python2_package_show')
        g.custom_command('create', 'automation_python2_package_create')
        g.custom_command('update', 'automation_python2_package_update')
        g.custom_command('delete', 'automation_python2_package_delete')
