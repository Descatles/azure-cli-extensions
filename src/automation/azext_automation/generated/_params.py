# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_automation.action import (
    AddSku,
    AddConnectionType,
    AddAutomationConnectionCreateFieldDefinitionValues,
    AddAutomationConnectionUpdateFieldDefinitionValues,
    AddCredential,
    AddSchedule,
    AddRunbook,
    AddJobscheduleParameters,
    AddAdvancedScheduleMonthlyOccurrences,
    AddWebhookParameters,
    AddScriptParameters,
    AddError,
    AddTasksPostTaskParameters,
    AddUpdateConfigurationWindows,
    AddUpdateConfigurationLinux,
    AddUpdateConfigurationTargetsNonAzureQueries,
    AddSecurityToken,
    AddJobParameters,
    AddConfiguration,
    AddDsccompilationjobParameters,
    AddTestjobParameters
)


def load_arguments(self, _):

    with self.argument_context('automation automation-account list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('automation automation-account show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation automation-account create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('name', help='Gets or sets name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='Gets or sets account SKU. Expect value: KEY1=VALUE1 KEY2=VALU'
                   'E2 ... , available KEYs are: name, family, capacity.')

    with self.argument_context('automation automation-account update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('name', help='Gets or sets the name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='Gets or sets account SKU. Expect value: KEY1=VALUE1 KEY2=VALU'
                   'E2 ... , available KEYs are: name, family, capacity.')

    with self.argument_context('automation automation-account delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation statistics list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation usage list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation key list-by-automation-account') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation certificate list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation certificate show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('certificate_name', help='The name of certificate.')

    with self.argument_context('automation certificate create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('certificate_name', help='The parameters supplied to the create or update certificate operation.')
        c.argument('name', help='Gets or sets the name of the certificate.')
        c.argument('base64value', help='Gets or sets the base64 encoded value of the certificate.')
        c.argument('description', help='Gets or sets the description of the certificate.')
        c.argument('thumbprint', help='Gets or sets the thumbprint of the certificate.')
        c.argument('is_exportable', arg_type=get_three_state_flag(), help='Gets or sets the is exportable flag of the c'
                   'ertificate.')

    with self.argument_context('automation certificate update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('certificate_name', help='The parameters supplied to the update certificate operation.')
        c.argument('name', help='Gets or sets the name of the certificate.')
        c.argument('description', help='Gets or sets the description of the certificate.')

    with self.argument_context('automation certificate delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('certificate_name', help='The name of certificate.')

    with self.argument_context('automation connection list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('connection_name', help='The name of connection.')

    with self.argument_context('automation connection create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('connection_name', help='The parameters supplied to the create or update connection operation.')
        c.argument('name', help='Gets or sets the name of the connection.')
        c.argument('description', help='Gets or sets the description of the connection.')
        c.argument('connection_type', action=AddConnectionType, nargs='+', help='Gets or sets the connectionType of the'
                   ' connection. Expect value: name=xx.')
        c.argument('field_definition_values', action=AddAutomationConnectionCreateFieldDefinitionValues, nargs='+',
                   help='Gets or sets the field definition properties of the connection. Expect value: KEY1=VALUE1 KEY2'
                   '=VALUE2 ...')

    with self.argument_context('automation connection update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('connection_name', help='The parameters supplied to the update a connection operation.')
        c.argument('name', help='Gets or sets the name of the connection.')
        c.argument('description', help='Gets or sets the description of the connection.')
        c.argument('field_definition_values', action=AddAutomationConnectionUpdateFieldDefinitionValues, nargs='+',
                   help='Gets or sets the field definition values of the connection. Expect value: KEY1=VALUE1 KEY2=VAL'
                   'UE2 ...')

    with self.argument_context('automation connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('connection_name', help='The name of connection.')

    with self.argument_context('automation connection-type list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation connection-type show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('connection_type_name', help='The name of connection type.')

    with self.argument_context('automation connection-type create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('connection_type_name', help='The parameters supplied to the create or update connection type operat'
                   'ion.')
        c.argument('name', help='Gets or sets the name of the connection type.')
        c.argument('is_global', arg_type=get_three_state_flag(), help='Gets or sets a Boolean value to indicate if the '
                   'connection type is global.')
        c.argument('field_definitions', arg_type=CLIArgumentType(options_list=['--field-definitions'], help='Gets or se'
                   'ts the field definitions of the connection type. Expected value: json-string/@json-file.'))

    with self.argument_context('automation connection-type update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('connection_type_name', help='The parameters supplied to the create or update connection type operat'
                   'ion.')
        c.argument('name', help='Gets or sets the name of the connection type.')
        c.argument('is_global', arg_type=get_three_state_flag(), help='Gets or sets a Boolean value to indicate if the '
                   'connection type is global.')
        c.argument('field_definitions', arg_type=CLIArgumentType(options_list=['--field-definitions'], help='Gets or se'
                   'ts the field definitions of the connection type. Expected value: json-string/@json-file.'))

    with self.argument_context('automation connection-type delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('connection_type_name', help='The name of connection type.')

    with self.argument_context('automation credential list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation credential show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('credential_name', help='The name of credential.')

    with self.argument_context('automation credential create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('credential_name', help='The parameters supplied to the create or update credential operation.')
        c.argument('name', help='Gets or sets the name of the credential.')
        c.argument('user_name', help='Gets or sets the user name of the credential.')
        c.argument('password', help='Gets or sets the password of the credential.')
        c.argument('description', help='Gets or sets the description of the credential.')

    with self.argument_context('automation credential update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('credential_name', help='The parameters supplied to the Update credential operation.')
        c.argument('name', help='Gets or sets the name of the credential.')
        c.argument('user_name', help='Gets or sets the user name of the credential.')
        c.argument('password', help='Gets or sets the password of the credential.')
        c.argument('description', help='Gets or sets the description of the credential.')

    with self.argument_context('automation credential delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('credential_name', help='The name of credential.')

    with self.argument_context('automation dsc-configuration list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')
        c.argument('skip', help='The number of rows to skip.')
        c.argument('top', help='The number of rows to take.')
        c.argument('inlinecount', help='Return total rows.')

    with self.argument_context('automation dsc-configuration show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('configuration_name', help='The configuration name.')

    with self.argument_context('automation dsc-configuration create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('configuration_name', help='The create or update parameters for configuration.')
        c.argument('name', help='Gets or sets name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('log_verbose', arg_type=get_three_state_flag(), help='Gets or sets verbose log option.')
        c.argument('log_progress', arg_type=get_three_state_flag(), help='Gets or sets progress log option.')
        c.argument('source', arg_type=CLIArgumentType(options_list=['--source'], help='Gets or sets the source. Expecte'
                   'd value: json-string/@json-file.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Gets or sets the configu'
                   'ration parameters. Expected value: json-string/@json-file.'))
        c.argument('description', help='Gets or sets the description of the configuration.')

    with self.argument_context('automation dsc-configuration update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('configuration_name', help='The create or update parameters for configuration.')
        c.argument('name', help='Gets or sets name of the resource.')
        c.argument('tags', tags_type)
        c.argument('log_verbose', arg_type=get_three_state_flag(), help='Gets or sets verbose log option.')
        c.argument('log_progress', arg_type=get_three_state_flag(), help='Gets or sets progress log option.')
        c.argument('source', arg_type=CLIArgumentType(options_list=['--source'], help='Gets or sets the source. Expecte'
                   'd value: json-string/@json-file.'))
        c.argument('parameters', arg_type=CLIArgumentType(options_list=['--parameters'], help='Gets or sets the configu'
                   'ration parameters. Expected value: json-string/@json-file.'))
        c.argument('description', help='Gets or sets the description of the configuration.')

    with self.argument_context('automation dsc-configuration delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('configuration_name', help='The configuration name.')

    with self.argument_context('automation hybrid-runbook-worker-group list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation hybrid-runbook-worker-group show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('hybrid_runbook_worker_group_name', help='The hybrid runbook worker group name')

    with self.argument_context('automation hybrid-runbook-worker-group update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('hybrid_runbook_worker_group_name', help='The hybrid runbook worker group name')
        c.argument('credential', action=AddCredential, nargs='+', help='Sets the credential of a worker group. Expect v'
                   'alue: name=xx.')

    with self.argument_context('automation hybrid-runbook-worker-group delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('hybrid_runbook_worker_group_name', help='The hybrid runbook worker group name')

    with self.argument_context('automation job-schedule list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation job-schedule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_schedule_id', help='The job schedule name.')

    with self.argument_context('automation job-schedule create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_schedule_id', help='The job schedule name.')
        c.argument('schedule', action=AddSchedule, nargs='+',
                   help='Gets or sets the schedule. Expect value: name=xx.')
        c.argument('runbook', action=AddRunbook, nargs='+', help='Gets or sets the runbook. Expect value: name=xx.')
        c.argument('run_on', help='Gets or sets the hybrid worker group that the scheduled job should run on.')
        c.argument('parameters', action=AddJobscheduleParameters, nargs='+', help='Gets or sets a list of job propertie'
                   's. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')

    with self.argument_context('automation job-schedule delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_schedule_id', help='The job schedule name.')

    with self.argument_context('automation linked-workspace show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation activity list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('module_name', help='The name of module.')

    with self.argument_context('automation activity show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('module_name', help='The name of module.')
        c.argument('activity_name', help='The name of activity.')

    with self.argument_context('automation module list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation module show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('module_name', help='The module name.')

    with self.argument_context('automation module create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('module_name', help='The name of module.')
        c.argument('name', help='Gets or sets name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('content_link', arg_type=CLIArgumentType(options_list=['--content-link'], help='Gets or sets the mod'
                   'ule content link. Expected value: json-string/@json-file.'))

    with self.argument_context('automation module update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('module_name', help='The name of module.')
        c.argument('name', help='Gets or sets name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('content_link', arg_type=CLIArgumentType(options_list=['--content-link'], help='Gets or sets the mod'
                   'ule content link. Expected value: json-string/@json-file.'))

    with self.argument_context('automation module delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('module_name', help='The module name.')

    with self.argument_context('automation object-data-type list-field') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('module_name', help='The name of module.')
        c.argument('type_name', help='The name of type.')

    with self.argument_context('automation field list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('module_name', help='The name of module.')
        c.argument('type_name', help='The name of type.')

    with self.argument_context('automation schedule list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation schedule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('schedule_name', help='The schedule name.')

    with self.argument_context('automation schedule create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('schedule_name', help='The schedule name.')
        c.argument('name', help='Gets or sets the name of the Schedule.')
        c.argument('description', help='Gets or sets the description of the schedule.')
        c.argument('start_time', help='Gets or sets the start time of the schedule.')
        c.argument('expiry_time', help='Gets or sets the end time of the schedule.')
        c.argument('interval', arg_type=CLIArgumentType(options_list=['--interval'], help='Gets or sets the interval of'
                   ' the schedule. Expected value: json-string/@json-file.'))
        c.argument('frequency', arg_type=get_enum_type(['OneTime', 'Day', 'Hour', 'Week', 'Month', 'Minute']), help='Ge'
                   'ts or sets the frequency of the schedule.')
        c.argument('time_zone', help='Gets or sets the time zone of the schedule.')
        c.argument('advanced_schedule_week_days', nargs='+', help='Days of the week that the job should execute on. Exp'
                   'ected value: json-string/@json-file.')
        c.argument('advanced_schedule_month_days', nargs='+', help='Days of the month that the job should execute on. M'
                   'ust be between 1 and 31. Expected value: json-string/@json-file.')
        c.argument('advanced_schedule_monthly_occurrences', action=AddAdvancedScheduleMonthlyOccurrences, nargs='+',
                   help='Occurrences of days within a month. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs'
                   ' are: occurrence, day.')

    with self.argument_context('automation schedule update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('schedule_name', help='The schedule name.')
        c.argument('name', help='Gets or sets the name of the Schedule.')
        c.argument('description', help='Gets or sets the description of the schedule.')
        c.argument('is_enabled', arg_type=get_three_state_flag(), help='Gets or sets a value indicating whether this sc'
                   'hedule is enabled.')

    with self.argument_context('automation schedule delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('schedule_name', help='The schedule name.')

    with self.argument_context('automation variable list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation variable show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('variable_name', help='The name of variable.')

    with self.argument_context('automation variable create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('variable_name', help='The variable name.')
        c.argument('name', help='Gets or sets the name of the variable.')
        c.argument('value', help='Gets or sets the value of the variable.')
        c.argument('description', help='Gets or sets the description of the variable.')
        c.argument('is_encrypted', arg_type=get_three_state_flag(), help='Gets or sets the encrypted flag of the variab'
                   'le.')

    with self.argument_context('automation variable update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('variable_name', help='The variable name.')
        c.argument('name', help='Gets or sets the name of the variable.')
        c.argument('value', help='Gets or sets the value of the variable.')
        c.argument('description', help='Gets or sets the description of the variable.')

    with self.argument_context('automation variable delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('variable_name', help='The name of variable.')

    with self.argument_context('automation webhook list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation webhook show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('webhook_name', help='The webhook name.')

    with self.argument_context('automation webhook create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('webhook_name', help='The webhook name.')
        c.argument('name', help='Gets or sets the name of the webhook.')
        c.argument('is_enabled', arg_type=get_three_state_flag(), help='Gets or sets the value of the enabled flag of w'
                   'ebhook.')
        c.argument('uri', help='Gets or sets the uri.')
        c.argument('expiry_time', help='Gets or sets the expiry time.')
        c.argument('parameters', action=AddWebhookParameters, nargs='+', help='Gets or sets the parameters of the job. '
                   'Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('runbook', action=AddRunbook, nargs='+', help='Gets or sets the runbook. Expect value: name=xx.')
        c.argument('run_on', help='Gets or sets the name of the hybrid worker group the webhook job will run on.')

    with self.argument_context('automation webhook update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('webhook_name', help='The webhook name.')
        c.argument('name', help='Gets or sets the name of the webhook.')
        c.argument('is_enabled', arg_type=get_three_state_flag(), help='Gets or sets the value of the enabled flag of w'
                   'ebhook.')
        c.argument('run_on', help='Gets or sets the name of the hybrid worker group the webhook job will run on.')
        c.argument('parameters', action=AddWebhookParameters, nargs='+', help='Gets or sets the parameters of the job. '
                   'Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('description', help='Gets or sets the description of the webhook.')

    with self.argument_context('automation webhook delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('webhook_name', help='The webhook name.')

    with self.argument_context('automation webhook generate-uri') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation watcher list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation watcher show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('watcher_name', help='The watcher name.')

    with self.argument_context('automation watcher create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('watcher_name', help='The watcher name.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('etag', help='Gets or sets the etag of the resource.')
        c.argument('execution_frequency_in_seconds',
                   help='Gets or sets the frequency at which the watcher is invoked.')
        c.argument('script_name', help='Gets or sets the name of the script the watcher is attached to, i.e. the name o'
                   'f an existing runbook.')
        c.argument('script_parameters', action=AddScriptParameters, nargs='+', help='Gets or sets the parameters of the'
                   ' script. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('script_run_on', help='Gets or sets the name of the hybrid worker group the watcher will run on.')
        c.argument('description', help='Gets or sets the description.')

    with self.argument_context('automation watcher update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('watcher_name', help='The watcher name.')
        c.argument('name', help='Gets or sets the name of the resource.')
        c.argument('execution_frequency_in_seconds',
                   help='Gets or sets the frequency at which the watcher is invoked.')

    with self.argument_context('automation watcher delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('watcher_name', help='The watcher name.')

    with self.argument_context('automation watcher start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('watcher_name', help='The watcher name.')

    with self.argument_context('automation watcher stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('watcher_name', help='The watcher name.')

    with self.argument_context('automation software-update-configuration list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('client_request_id', help='Identifies this specific client request.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation software-update-configuration show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('software_update_configuration_name', help='The name of the software update configuration to be crea'
                   'ted.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation software-update-configuration create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('software_update_configuration_name', help='The name of the software update configuration to be crea'
                   'ted.')
        c.argument('client_request_id', help='Identifies this specific client request.')
        c.argument('error', action=AddError, nargs='+', help='Details of provisioning error Expect value: KEY1=VALUE1 K'
                   'EY2=VALUE2 ... , available KEYs are: code, message.')
        c.argument('tasks_post_task_parameters', action=AddTasksPostTaskParameters, nargs='+', help='Gets or sets the p'
                   'arameters of the task. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('tasks_post_task_source', help='Gets or sets the name of the runbook.')
        c.argument('tasks_pre_task_parameters', action=AddTasksPostTaskParameters, nargs='+', help='Gets or sets the pa'
                   'rameters of the task. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('tasks_pre_task_source', help='Gets or sets the name of the runbook.')
        c.argument('schedule_info_start_time', help='Gets or sets the start time of the schedule.')
        c.argument('schedule_info_expiry_time', help='Gets or sets the end time of the schedule.')
        c.argument('schedule_info_expiry_time_offset_minutes', help='Gets or sets the expiry time\'s offset in minutes.'
                   '')
        c.argument('schedule_info_is_enabled', arg_type=get_three_state_flag(), help='Gets or sets a value indicating w'
                   'hether this schedule is enabled.')
        c.argument('schedule_info_next_run', help='Gets or sets the next run time of the schedule.')
        c.argument('schedule_info_next_run_offset_minutes',
                   help='Gets or sets the next run time\'s offset in minutes.')
        c.argument('schedule_info_interval', help='Gets or sets the interval of the schedule.')
        c.argument('schedule_info_frequency', arg_type=get_enum_type(['OneTime', 'Day', 'Hour', 'Week', 'Month', 'Minut'
                   'e']), help='Gets or sets the frequency of the schedule.')
        c.argument('schedule_info_time_zone', help='Gets or sets the time zone of the schedule.')
        c.argument('schedule_info_creation_time', help='Gets or sets the creation time.')
        c.argument('schedule_info_last_modified_time', help='Gets or sets the last modified time.')
        c.argument('schedule_info_description', help='Gets or sets the description.')
        c.argument('schedule_info_advanced_schedule_week_days', nargs='+', help='Days of the week that the job should e'
                   'xecute on. Expected value: json-string/@json-file.')
        c.argument('schedule_info_advanced_schedule_month_days', nargs='+', help='Days of the month that the job should'
                   ' execute on. Must be between 1 and 31. Expected value: json-string/@json-file.')
        c.argument('schedule_info_advanced_schedule_monthly_occurrences', action=AddAdvancedScheduleMonthlyOccurrences,
                    nargs='+', help='Occurrences of days within a month. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , av'
                   'ailable KEYs are: occurrence, day.')
        c.argument('update_configuration_operating_system', arg_type=get_enum_type(['Windows', 'Linux']), help='operati'
                   'ng system of target machines')
        c.argument('update_configuration_windows', action=AddUpdateConfigurationWindows, nargs='+', help='Windows speci'
                   'fic update configuration. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: included-'
                   'update-classifications, excluded-kb-numbers, included-kb-numbers, reboot-setting.')
        c.argument('update_configuration_linux', action=AddUpdateConfigurationLinux, nargs='+', help='Linux specific up'
                   'date configuration. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: included-packag'
                   'e-classifications, excluded-package-name-masks, included-package-name-masks, reboot-setting.')
        c.argument('update_configuration_duration', help='Maximum time allowed for the software update configuration ru'
                   'n. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601')
        c.argument('update_configuration_azure_virtual_machines', nargs='+', help='List of azure resource Ids for azure'
                   ' virtual machines targeted by the software update configuration. Expected value: json-string/@json-'
                   'file.')
        c.argument('update_configuration_non_azure_computer_names', nargs='+', help='List of names of non-azure machine'
                   's targeted by the software update configuration. Expected value: json-string/@json-file.')
        c.argument('update_configuration_targets_azure_queries', arg_type=CLIArgumentType(options_list=['--update-confi'
                   'guration-targets-azure-queries'], help='List of Azure queries in the software update configuration.'
                   ' Expected value: json-string/@json-file.'))
        c.argument('update_configuration_targets_non_azure_queries',
                   action=AddUpdateConfigurationTargetsNonAzureQueries, nargs='+', help='List of non Azure queries in t'
                   'he software update configuration. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: f'
                   'unction-alias, workspace-id.')

    with self.argument_context('automation software-update-configuration delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('software_update_configuration_name', help='The name of the software update configuration to be crea'
                   'ted.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation software-update-configuration-run list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('client_request_id', help='Identifies this specific client request.')
        c.argument('filter', help='The filter to apply on the operation. You can use the following filters: \'propertie'
                   's/osType\', \'properties/status\', \'properties/startTime\', and \'properties/softwareUpdateConfigu'
                   'ration/name\'')
        c.argument('skip', help='Number of entries you skip before returning results')
        c.argument('top', help='Maximum number of entries returned in the results collection')

    with self.argument_context('automation software-update-configuration-run show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('software_update_configuration_run_id', help='The Id of the software update configuration run.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation software-update-configuration-machine-run list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('client_request_id', help='Identifies this specific client request.')
        c.argument('filter', help='The filter to apply on the operation. You can use the following filters: \'propertie'
                   's/osType\', \'properties/status\', \'properties/startTime\', and \'properties/softwareUpdateConfigu'
                   'ration/name\'')
        c.argument('skip', help='number of entries you skip before returning results')
        c.argument('top', help='Maximum number of entries returned in the results collection')

    with self.argument_context('automation software-update-configuration-machine-run show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('software_update_configuration_machine_run_id', help='The Id of the software update configuration ma'
                   'chine run.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation source-control list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation source-control show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('source_control_name', help='The name of source control.')

    with self.argument_context('automation source-control create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('source_control_name', help='The source control name.')
        c.argument('repo_url', help='The repo url of the source control.')
        c.argument('branch',
                   help='The repo branch of the source control. Include branch as empty string for VsoTfvc.')
        c.argument('folder_path', help='The folder path of the source control. Path must be relative.')
        c.argument('auto_sync', arg_type=get_three_state_flag(), help='The auto async of the source control. Default is'
                   ' false.')
        c.argument('publish_runbook', arg_type=get_three_state_flag(), help='The auto publish of the source control. De'
                   'fault is true.')
        c.argument('source_type', arg_type=get_enum_type(['VsoGit', 'VsoTfvc', 'GitHub']), help='The source type. Must '
                   'be one of VsoGit, VsoTfvc, GitHub, case sensitive.')
        c.argument('security_token', action=AddSecurityToken, nargs='+', help='The authorization token for the repo of '
                   'the source control. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: access-token, r'
                   'efresh-token, token-type.')
        c.argument('description', help='The user description of the source control.')

    with self.argument_context('automation source-control update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('source_control_name', help='The source control name.')
        c.argument('branch', help='The repo branch of the source control.')
        c.argument('folder_path', help='The folder path of the source control. Path must be relative.')
        c.argument('auto_sync', arg_type=get_three_state_flag(), help='The auto sync of the source control. Default is '
                   'false.')
        c.argument('publish_runbook', arg_type=get_three_state_flag(), help='The auto publish of the source control. De'
                   'fault is true.')
        c.argument('security_token', action=AddSecurityToken, nargs='+', help='The authorization token for the repo of '
                   'the source control. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: access-token, r'
                   'efresh-token, token-type.')
        c.argument('description', help='The user description of the source control.')

    with self.argument_context('automation source-control delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('source_control_name', help='The name of source control.')

    with self.argument_context('automation source-control-sync-job list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('source_control_name', help='The source control name.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation source-control-sync-job show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('source_control_name', help='The source control name.')
        c.argument('source_control_sync_job_id', help='The source control sync job id.')

    with self.argument_context('automation source-control-sync-job create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('source_control_name', help='The source control name.')
        c.argument('source_control_sync_job_id', help='The source control sync job id.')
        c.argument('commit_id', help='The commit id of the source control sync job. If not syncing to a commitId, enter'
                   ' an empty string.')

    with self.argument_context('automation source-control-sync-job-stream list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('source_control_name', help='The source control name.')
        c.argument('source_control_sync_job_id', help='The source control sync job id.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation source-control-sync-job-stream show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('source_control_name', help='The source control name.')
        c.argument('source_control_sync_job_id', help='The source control sync job id.')
        c.argument('stream_id', help='The id of the sync job stream.')

    with self.argument_context('automation job list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation job show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_name', help='The name of the job to be created.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation job create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_name', help='The job name.')
        c.argument('client_request_id', help='Identifies this specific client request.')
        c.argument('runbook', action=AddRunbook, nargs='+', help='Gets or sets the runbook. Expect value: name=xx.')
        c.argument('parameters', action=AddJobParameters, nargs='+', help='Gets or sets the parameters of the job. Expe'
                   'ct value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('run_on', help='Gets or sets the runOn which specifies the group name where the job is to be execute'
                   'd.')

    with self.argument_context('automation job resume') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_name', help='The job name.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation job stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_name', help='The job name.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation job suspend') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_name', help='The job name.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation job-stream list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_name', help='The job name.')
        c.argument('filter', help='The filter to apply on the operation.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation job-stream show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_name', help='The job name.')
        c.argument('job_stream_id', help='The job stream id.')
        c.argument('client_request_id', help='Identifies this specific client request.')

    with self.argument_context('automation agent-registration-information show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation agent-registration-information regenerate-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('key_name', arg_type=get_enum_type(['primary', 'secondary']), help='Gets or sets the agent registrat'
                   'ion key name - primary or secondary.')

    with self.argument_context('automation dsc-node list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')
        c.argument('skip', help='The number of rows to skip.')
        c.argument('top', help='The number of rows to take.')
        c.argument('inlinecount', help='Return total rows.')

    with self.argument_context('automation dsc-node show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('node_id', help='The node id.')

    with self.argument_context('automation dsc-node update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('node_id', help='Parameters supplied to the update dsc node.')
        c.argument('node_configuration_name', help='Gets or sets the name of the dsc node configuration.')

    with self.argument_context('automation dsc-node delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('node_id', help='The node id.')

    with self.argument_context('automation node-report list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('node_id', help='The parameters supplied to the list operation.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation node-report show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('node_id', help='The Dsc node id.')
        c.argument('report_id', help='The report id.')

    with self.argument_context('automation dsc-compilation-job list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation dsc-compilation-job show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_id', help='The job id.')
        c.argument('job_stream_id', help='The job stream id.')
        c.argument('compilation_job_name', help='The DSC configuration Id.')

    with self.argument_context('automation dsc-compilation-job create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('compilation_job_name', help='The DSC configuration Id.')
        c.argument('name', help='Gets or sets name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('configuration', action=AddConfiguration, nargs='+', help='Gets or sets the configuration. Expect va'
                   'lue: name=xx.')
        c.argument('parameters', action=AddDsccompilationjobParameters, nargs='+', help='Gets or sets the parameters of'
                   ' the job. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('increment_node_configuration_build', arg_type=get_three_state_flag(), help='If a new build version '
                   'of NodeConfiguration is required.')

    with self.argument_context('automation dsc-compilation-job-stream list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('job_id', help='The job id.')

    with self.argument_context('automation dsc-node-configuration list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('filter', help='The filter to apply on the operation.')
        c.argument('skip', help='The number of rows to skip.')
        c.argument('top', help='The number of rows to take.')
        c.argument('inlinecount', help='Return total rows.')

    with self.argument_context('automation dsc-node-configuration show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('node_configuration_name', help='The Dsc node configuration name.')

    with self.argument_context('automation dsc-node-configuration create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('node_configuration_name', help='The Dsc node configuration name.')
        c.argument('name', help='Name of the node configuration.')
        c.argument('tags', tags_type)
        c.argument('source', arg_type=CLIArgumentType(options_list=['--source'], help='Gets or sets the source. Expecte'
                   'd value: json-string/@json-file.'))
        c.argument('configuration', action=AddConfiguration, nargs='+', help='Gets or sets the configuration of the nod'
                   'e. Expect value: name=xx.')
        c.argument('increment_node_configuration_build', arg_type=get_three_state_flag(), help='If a new build version '
                   'of NodeConfiguration is required.')

    with self.argument_context('automation dsc-node-configuration update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('node_configuration_name', help='The Dsc node configuration name.')
        c.argument('name', help='Name of the node configuration.')
        c.argument('tags', tags_type)
        c.argument('source', arg_type=CLIArgumentType(options_list=['--source'], help='Gets or sets the source. Expecte'
                   'd value: json-string/@json-file.'))
        c.argument('configuration', action=AddConfiguration, nargs='+', help='Gets or sets the configuration of the nod'
                   'e. Expect value: name=xx.')
        c.argument('increment_node_configuration_build', arg_type=get_three_state_flag(), help='If a new build version '
                   'of NodeConfiguration is required.')

    with self.argument_context('automation dsc-node-configuration delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('node_configuration_name', help='The Dsc node configuration name.')

    with self.argument_context('automation node-count-information show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('count_type', arg_type=get_enum_type(['status', 'nodeconfiguration']), help='The type of counts to r'
                   'etrieve')

    with self.argument_context('automation runbook-draft show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')

    with self.argument_context('automation runbook-draft replace-content') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')
        c.argument('runbook_content', help='The runbook draft content.')

    with self.argument_context('automation runbook-draft undo-edit') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')

    with self.argument_context('automation runbook list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation runbook show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')

    with self.argument_context('automation runbook create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')
        c.argument('name', help='Gets or sets the name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('log_verbose', arg_type=get_three_state_flag(), help='Gets or sets verbose log option.')
        c.argument('log_progress', arg_type=get_three_state_flag(), help='Gets or sets progress log option.')
        c.argument('runbook_type', arg_type=get_enum_type(['Script', 'Graph', 'PowerShellWorkflow', 'PowerShell', 'Grap'
                   'hPowerShellWorkflow', 'GraphPowerShell']), help='Gets or sets the type of the runbook.')
        c.argument('draft', arg_type=CLIArgumentType(options_list=['--draft'], help='Gets or sets the draft runbook pro'
                   'perties. Expected value: json-string/@json-file.'))
        c.argument('publish_content_link', arg_type=CLIArgumentType(options_list=['--publish-content-link'], help='Gets'
                   ' or sets the published runbook content link. Expected value: json-string/@json-file.'))
        c.argument('description', help='Gets or sets the description of the runbook.')
        c.argument('log_activity_trace', help='Gets or sets the activity-level tracing options of the runbook.')

    with self.argument_context('automation runbook update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')
        c.argument('name', help='Gets or sets the name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('description', help='Gets or sets the description of the runbook.')
        c.argument('log_verbose', arg_type=get_three_state_flag(), help='Gets or sets verbose log option.')
        c.argument('log_progress', arg_type=get_three_state_flag(), help='Gets or sets progress log option.')
        c.argument('log_activity_trace', help='Gets or sets the activity-level tracing options of the runbook.')

    with self.argument_context('automation runbook delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')

    with self.argument_context('automation runbook publish') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The parameters supplied to the publish runbook operation.')

    with self.argument_context('automation test-job-stream list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')
        c.argument('filter', help='The filter to apply on the operation.')

    with self.argument_context('automation test-job-stream show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')
        c.argument('job_stream_id', help='The job stream id.')

    with self.argument_context('automation test-job show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')

    with self.argument_context('automation test-job create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The parameters supplied to the create test job operation.')
        c.argument('parameters', action=AddTestjobParameters, nargs='+', help='Gets or sets the parameters of the test '
                   'job. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('run_on', help='Gets or sets the runOn which specifies the group name where the job is to be execute'
                   'd.')

    with self.argument_context('automation test-job resume') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')

    with self.argument_context('automation test-job stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')

    with self.argument_context('automation test-job suspend') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('runbook_name', help='The runbook name.')

    with self.argument_context('automation python2-package list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')

    with self.argument_context('automation python2-package show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('package_name', help='The python package name.')

    with self.argument_context('automation python2-package create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('package_name', help='The name of python package.')
        c.argument('tags', tags_type)
        c.argument('content_link', arg_type=CLIArgumentType(options_list=['--content-link'], help='Gets or sets the mod'
                   'ule content link. Expected value: json-string/@json-file.'))

    with self.argument_context('automation python2-package update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('package_name', help='The name of python package.')
        c.argument('tags', tags_type)

    with self.argument_context('automation python2-package delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', help='The name of the automation account.')
        c.argument('package_name', help='The python package name.')
